generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  activatedAt DateTime?
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  createdById Int
  updatedById Int
  createdBy   User      @relation("ActivateTokenCreatedBy", fields: [createdById], references: [id])
  updatedBy   User      @relation("ActivateTokenUpdatedBy", fields: [updatedById], references: [id])
  user        User      @relation("ActivateTokenUser", fields: [userId], references: [id])
}

model Athlete {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  personId       Int              @unique
  teamId         Int?
  createdById    Int
  updatedById    Int
  createdBy      User             @relation("AthleteCreatedBy", fields: [createdById], references: [id])
  person         Person           @relation(fields: [personId], references: [id])
  team           Team?            @relation(fields: [teamId], references: [id])
  updatedBy      User             @relation("AthleteUpdatedBy", fields: [updatedById], references: [id])
  athleteToEvent AthleteToEvent[]
  event          Event[]
}

model AthleteToEvent {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  athleteId   Int
  eventId     Int
  createdById Int
  updatedById Int
  athlete     Athlete  @relation(fields: [athleteId], references: [id])
  createdBy   User     @relation("AthleteToEventCreatedBy", fields: [createdById], references: [id])
  event       Event    @relation(fields: [eventId], references: [id])
  updatedBy   User     @relation("AthleteToEventUpdatedBy", fields: [updatedById], references: [id])
}

model Challenge {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  updatedById Int
  createdBy   User     @relation("ChallengeCreatedBy", fields: [createdById], references: [id])
  updatedBy   User     @relation("ChallengeUpdatedBy", fields: [updatedById], references: [id])
}

model City {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  countryId   Int
  createdById Int
  updatedById Int
  country     Country   @relation(fields: [countryId], references: [id])
  createdBy   User      @relation("CityCreatedBy", fields: [createdById], references: [id])
  updatedBy   User      @relation("CityUpdatedBy", fields: [updatedById], references: [id])
  location    Location?
  user        User[]
}

model Country {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  flagId      Int?
  createdById Int
  updatedById Int
  city        City[]
  createdBy   User     @relation("CountryCreatedBy", fields: [createdById], references: [id])
  flag        Image?   @relation(fields: [flagId], references: [id])
  updatedBy   User     @relation("CountryUpdatedBy", fields: [updatedById], references: [id])
  league      League[]
  person      Person[]
}

model Event {
  id             Int              @id @default(autoincrement())
  date           DateTime?
  result         String?
  attendance     Int?
  isDerby        Boolean?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  facilityId     Int?
  team1Id        Int?
  team2Id        Int?
  sportId        Int
  winnerId       Int?
  createdById    Int
  updatedById    Int
  athleteToEvent AthleteToEvent[]
  createdBy      User             @relation("EventCreatedBy", fields: [createdById], references: [id])
  facility       Facility?        @relation(fields: [facilityId], references: [id])
  sport          Sport            @relation(fields: [sportId], references: [id])
  team1          Team?            @relation("Team1", fields: [team1Id], references: [id])
  team2          Team?            @relation("Team2", fields: [team2Id], references: [id])
  updatedBy      User             @relation("EventUpdatedBy", fields: [updatedById], references: [id])
  winner         Athlete?         @relation(fields: [winnerId], references: [id])
  imageToEvent   ImageToEvent[]
  userToEvent    UserToEvent[]
}

model Facility {
  id              Int               @id @default(autoincrement())
  capacity        Int
  name            String
  build_year      Int?
  coordinates     String?
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  locationId      Int               @unique
  standsId        Int?
  createdById     Int
  updatedById     Int
  event           Event[]
  createdBy       User              @relation("FacilityCreatedBy", fields: [createdById], references: [id])
  location        Location          @relation(fields: [locationId], references: [id])
  updatedBy       User              @relation("FacilityUpdatedBy", fields: [updatedById], references: [id])
  imageToFacility ImageToFacility[]
  userToFacility  UserToFacility[]
}

model Gadget {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  gadgetTypeId  Int
  teamId        Int?
  createdById   Int
  updatedById   Int
  createdBy     User            @relation("GadgetCreatedBy", fields: [createdById], references: [id])
  gadgetType    GadgetType      @relation(fields: [gadgetTypeId], references: [id])
  team          Team?           @relation(fields: [teamId], references: [id])
  updatedBy     User            @relation("GadgetUpdatedBy", fields: [updatedById], references: [id])
  imageToGadget ImageToGadget[]
  userToGadget  UserToGadget[]
}

model GadgetType {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  updatedById Int
  gadget      Gadget[]
  createdBy   User     @relation("GadgetTypeCreatedBy", fields: [createdById], references: [id])
  updatedBy   User     @relation("GadgetTypeUpdatedBy", fields: [updatedById], references: [id])
}

model Image {
  id                  Int               @id @default(autoincrement())
  name                String
  url                 String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  createdById         Int
  updatedById         Int
  country             Country[]
  createdBy           User              @relation("ImageCreatedBy", fields: [createdById], references: [id])
  updatedBy           User              @relation("ImageUpdatedBy", fields: [updatedById], references: [id])
  imageToEvent        ImageToEvent[]
  imageToFacility     ImageToFacility[]
  imageToGadget       ImageToGadget[]
  imageToUser         ImageToUser[]
  team                Team[]
  userBackgroundImage User[]            @relation("BackgroundImage")
  userProfileImage    User[]            @relation("ProfileImage")
}

model ImageToEvent {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageId     Int
  eventId     Int
  createdById Int
  updatedById Int
  createdBy   User     @relation("ImageToEventCreatedBy", fields: [createdById], references: [id])
  event       Event    @relation(fields: [eventId], references: [id])
  image       Image    @relation(fields: [imageId], references: [id])
  updatedBy   User     @relation("ImageToEventUpdatedBy", fields: [updatedById], references: [id])
}

model ImageToFacility {
  id          Int      @id @default(autoincrement())
  isIndoor    Boolean?
  isOutdoor   Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageId     Int
  facilityId  Int
  createdById Int
  updatedById Int
  createdBy   User     @relation("ImageToFacilityCreatedBy", fields: [createdById], references: [id])
  facility    Facility @relation(fields: [facilityId], references: [id])
  image       Image    @relation(fields: [imageId], references: [id])
  updatedBy   User     @relation("ImageToFacilityUpdatedBy", fields: [updatedById], references: [id])
}

model ImageToGadget {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageId     Int
  gadgetId    Int
  createdById Int
  updatedById Int
  createdBy   User     @relation("ImageToGadgetCreatedBy", fields: [createdById], references: [id])
  gadget      Gadget   @relation(fields: [gadgetId], references: [id])
  image       Image    @relation(fields: [imageId], references: [id])
  updatedBy   User     @relation("ImageToGadgetUpdatedBy", fields: [updatedById], references: [id])
}

model ImageToUser {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageId     Int
  userId      Int
  createdById Int
  updatedById Int
  createdBy   User     @relation("ImageToUserCreatedBy", fields: [createdById], references: [id])
  image       Image    @relation(fields: [imageId], references: [id])
  updatedBy   User     @relation("ImageToUserUpdatedBy", fields: [updatedById], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model League {
  id          Int      @id @default(autoincrement())
  division    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  countryId   Int
  sportId     Int
  createdById Int
  updatedById Int
  name        String
  country     Country  @relation(fields: [countryId], references: [id])
  createdBy   User     @relation("LeagueCreatedBy", fields: [createdById], references: [id])
  sport       Sport    @relation(fields: [sportId], references: [id])
  updatedBy   User     @relation("LeagueUpdatedBy", fields: [updatedById], references: [id])
  team        Team[]
}

model Location {
  id          Int       @id @default(autoincrement())
  street      String?
  number      String?
  zipCode     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cityId      Int       @unique
  createdById Int
  updatedById Int
  facility    Facility?
  city        City      @relation(fields: [cityId], references: [id])
  createdBy   User      @relation("LocationCreatedBy", fields: [createdById], references: [id])
  updatedBy   User      @relation("LocationUpdatedBy", fields: [updatedById], references: [id])
}

model Log {
  id          Int        @id @default(autoincrement())
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById Int
  updatedById Int
  location    String
  data        Json?
  level       LogLevel?
  errorType   ErrorType?
  createdBy   User       @relation("LogCreatedBy", fields: [createdById], references: [id])
  updatedBy   User       @relation("LogUpdatedBy", fields: [updatedById], references: [id])
}

model Market {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  updatedById Int
  createdBy   User     @relation("MarketCreatedBy", fields: [createdById], references: [id])
  updatedBy   User     @relation("MarketUpdatedBy", fields: [updatedById], references: [id])
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userToFriendId Int
  authorId       Int
  createdById    Int
  updatedById    Int
  author         User         @relation(fields: [authorId], references: [id])
  createdBy      User         @relation("MessageCreatedBy", fields: [createdById], references: [id])
  updatedBy      User         @relation("MessageUpdatedBy", fields: [updatedById], references: [id])
  userToFriend   UserToFriend @relation(fields: [userToFriendId], references: [id])
}

model Person {
  id            Int       @id @default(autoincrement())
  name          String?
  lastName      String?
  birthDate     DateTime?
  gender        Gender?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  nationalityId Int?
  createdById   Int?
  updatedById   Int?
  athlete       Athlete?
  createdBy     User?     @relation("PersonCreatedBy", fields: [createdById], references: [id])
  nationality   Country?  @relation(fields: [nationalityId], references: [id])
  updatedBy     User?     @relation("PersonUpdatedBy", fields: [updatedById], references: [id])
  team          Team[]
  user          User?
}

model ResetPasswordToken {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  createdById Int
  updatedById Int
  createdBy   User     @relation("ResetPasswordTokenCreatedBy", fields: [createdById], references: [id])
  updatedBy   User     @relation("ResetPasswordTokenUpdatedBy", fields: [updatedById], references: [id])
  user        User     @relation("ResetPasswordTokenUser", fields: [userId], references: [id])
}

model Sport {
  id           Int      @id @default(autoincrement())
  name         String
  isIndividual Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdById  Int
  updatedById  Int
  event        Event[]
  league       League[]
  createdBy    User     @relation("SportCreatedBy", fields: [createdById], references: [id])
  updatedBy    User     @relation("SportUpdatedBy", fields: [updatedById], references: [id])
  user         User[]
}

model Team {
  id             Int       @id @default(autoincrement())
  name           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  coachId        Int
  logoId         Int
  leagueId       Int
  createdById    Int
  updatedById    Int
  primaryColor   String?
  secondaryColor String?
  tertiaryColor  String?
  athlete        Athlete[]
  eventTeam1     Event[]   @relation("Team1")
  eventTeam2     Event[]   @relation("Team2")
  gadget         Gadget[]
  coach          Person    @relation(fields: [coachId], references: [id])
  createdBy      User      @relation("TeamCreatedBy", fields: [createdById], references: [id])
  league         League    @relation(fields: [leagueId], references: [id])
  logo           Image     @relation(fields: [logoId], references: [id])
  updatedBy      User      @relation("TeamUpdatedBy", fields: [updatedById], references: [id])
  user           User[]
}

model TourGroup {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdById Int
  updatedById Int
  createdBy   User          @relation("TourGroupCreatedBy", fields: [createdById], references: [id])
  updatedBy   User          @relation("TourGroupUpdatedBy", fields: [updatedById], references: [id])
  userToEvent UserToEvent[]
}

model User {
  id                          Int                  @id @default(autoincrement())
  email                       String               @unique
  username                    String               @unique
  password                    String
  isActive                    Boolean              @default(false)
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  personId                    Int                  @unique
  profileImageId              Int?
  backgroundImageId           Int?
  favouriteTeamId             Int?
  cityId                      Int?
  createdById                 Int?
  updatedById                 Int?
  favouriteSportId            Int?
  primaryColor                String?
  secondaryColor              String?
  role                        Role                 @default(USER)
  activateTokenCreatedBy      ActivateToken[]      @relation("ActivateTokenCreatedBy")
  activateTokenUpdatedBy      ActivateToken[]      @relation("ActivateTokenUpdatedBy")
  activateToken               ActivateToken[]      @relation("ActivateTokenUser")
  athleteCreatedBy            Athlete[]            @relation("AthleteCreatedBy")
  athleteUpdatedBy            Athlete[]            @relation("AthleteUpdatedBy")
  athleteToEventCreatedBy     AthleteToEvent[]     @relation("AthleteToEventCreatedBy")
  athleteToEventUpdatedBy     AthleteToEvent[]     @relation("AthleteToEventUpdatedBy")
  challengeCreatedBy          Challenge[]          @relation("ChallengeCreatedBy")
  challengeUpdatedBy          Challenge[]          @relation("ChallengeUpdatedBy")
  cityCreatedBy               City[]               @relation("CityCreatedBy")
  cityUpdatedBy               City[]               @relation("CityUpdatedBy")
  countryCreatedBy            Country[]            @relation("CountryCreatedBy")
  countryUpdatedBy            Country[]            @relation("CountryUpdatedBy")
  eventCreatedBy              Event[]              @relation("EventCreatedBy")
  eventUpdatedBy              Event[]              @relation("EventUpdatedBy")
  facilityCreatedBy           Facility[]           @relation("FacilityCreatedBy")
  facilityUpdatedBy           Facility[]           @relation("FacilityUpdatedBy")
  gadgetCreatedBy             Gadget[]             @relation("GadgetCreatedBy")
  gadgetUpdatedBy             Gadget[]             @relation("GadgetUpdatedBy")
  gadgetTypeCreatedBy         GadgetType[]         @relation("GadgetTypeCreatedBy")
  gadgetTypeUpdatedBy         GadgetType[]         @relation("GadgetTypeUpdatedBy")
  imageCreatedBy              Image[]              @relation("ImageCreatedBy")
  imageUpdatedBy              Image[]              @relation("ImageUpdatedBy")
  imageToEventCreatedBy       ImageToEvent[]       @relation("ImageToEventCreatedBy")
  imageToEventUpdatedBy       ImageToEvent[]       @relation("ImageToEventUpdatedBy")
  imageToFacilityCreatedBy    ImageToFacility[]    @relation("ImageToFacilityCreatedBy")
  imageToFacilityUpdatedBy    ImageToFacility[]    @relation("ImageToFacilityUpdatedBy")
  imageToGadgetCreatedBy      ImageToGadget[]      @relation("ImageToGadgetCreatedBy")
  imageToGadgetUpdatedBy      ImageToGadget[]      @relation("ImageToGadgetUpdatedBy")
  imageToUserCreatedBy        ImageToUser[]        @relation("ImageToUserCreatedBy")
  imageToUserUpdatedBy        ImageToUser[]        @relation("ImageToUserUpdatedBy")
  imageToUser                 ImageToUser[]
  leagueCreatedBy             League[]             @relation("LeagueCreatedBy")
  leagueUpdatedBy             League[]             @relation("LeagueUpdatedBy")
  locationCreatedBy           Location[]           @relation("LocationCreatedBy")
  locationUpdatedBy           Location[]           @relation("LocationUpdatedBy")
  logCreatedBy                Log[]                @relation("LogCreatedBy")
  logUpdatedBy                Log[]                @relation("LogUpdatedBy")
  marketCreatedBy             Market[]             @relation("MarketCreatedBy")
  marketUpdatedBy             Market[]             @relation("MarketUpdatedBy")
  message                     Message[]
  messageCreatedBy            Message[]            @relation("MessageCreatedBy")
  messageUpdatedBy            Message[]            @relation("MessageUpdatedBy")
  personCreatedBy             Person[]             @relation("PersonCreatedBy")
  personUpdatedBy             Person[]             @relation("PersonUpdatedBy")
  resetPasswordTokenCreatedBy ResetPasswordToken[] @relation("ResetPasswordTokenCreatedBy")
  resetPasswordTokenUpdatedBy ResetPasswordToken[] @relation("ResetPasswordTokenUpdatedBy")
  resetPasswordToken          ResetPasswordToken[] @relation("ResetPasswordTokenUser")
  sportCreatedBy              Sport[]              @relation("SportCreatedBy")
  sportUpdatedBy              Sport[]              @relation("SportUpdatedBy")
  teamCreatedBy               Team[]               @relation("TeamCreatedBy")
  teamUpdatedBy               Team[]               @relation("TeamUpdatedBy")
  tourGroupCreatedBy          TourGroup[]          @relation("TourGroupCreatedBy")
  tourGroupUpdatedBy          TourGroup[]          @relation("TourGroupUpdatedBy")
  backgroundImage             Image?               @relation("BackgroundImage", fields: [backgroundImageId], references: [id])
  city                        City?                @relation(fields: [cityId], references: [id])
  createdBy                   User?                @relation("UserCreatedBy", fields: [createdById], references: [id])
  userCreatedBy               User[]               @relation("UserCreatedBy")
  favouriteSport              Sport?               @relation(fields: [favouriteSportId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  favouriteTeam               Team?                @relation(fields: [favouriteTeamId], references: [id])
  person                      Person               @relation(fields: [personId], references: [id])
  profileImage                Image?               @relation("ProfileImage", fields: [profileImageId], references: [id])
  updatedBy                   User?                @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  userUpdatedBy               User[]               @relation("UserUpdatedBy")
  userToEventCreatedBy        UserToEvent[]        @relation("UserToEventCreatedBy")
  userToEventUpdatedBy        UserToEvent[]        @relation("UserToEventUpdatedBy")
  userToEvent                 UserToEvent[]
  userToFacilityCreatedBy     UserToFacility[]     @relation("UserToFacilityCreatedBy")
  userToFacilityUpdatedBy     UserToFacility[]     @relation("UserToFacilityUpdatedBy")
  userToFacility              UserToFacility[]
  userToFriendCreatedBy       UserToFriend[]       @relation("UserToFriendCreatedBy")
  UserToFriendInviting        UserToFriend[]       @relation("InvitingUser")
  UserToFriendRecipent        UserToFriend[]       @relation("RecipentUser")
  userToFriendUpdatedBy       UserToFriend[]       @relation("UserToFriendUpdatedBy")
  userToGadgetCreatedBy       UserToGadget[]       @relation("UserToGadgetCreatedBy")
  userToGadgetUpdatedBy       UserToGadget[]       @relation("UserToGadgetUpdatedBy")
  userToGadget                UserToGadget[]
  userPreferences             UserPreferences?     @relation("UserPreferences")
  userPreferencesCreatedBy    UserPreferences[]    @relation("UserPreferencesCreatedBy")
  userPreferencesUpdatedBy    UserPreferences[]    @relation("UserPreferencesUpdatedBy")
}

model UserPreferences {
  id                          Int      @id @default(autoincrement())
  userId                      Int      @unique
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  createdById                 Int
  updatedById                 Int
  showOnlyFavoriteSportContent Boolean @default(false)
  prioritizeNearbyEvents      Boolean @default(false)
  showFriendActivitiesInFeed  Boolean @default(false)
  pushNewEventsNearby         Boolean @default(true)
  pushFriendActivities        Boolean @default(true)
  pushChallengeUpdates        Boolean @default(true)
  pushTournamentUpdates       Boolean @default(true)
  emailEventReminders         Boolean @default(true)
  emailTournamentReminders    Boolean @default(true)
  emailWeeklyDigest           Boolean @default(true)
  user                        User     @relation("UserPreferences", fields: [userId], references: [id], onDelete: Cascade)
  createdBy                   User     @relation("UserPreferencesCreatedBy", fields: [createdById], references: [id])
  updatedBy                   User     @relation("UserPreferencesUpdatedBy", fields: [updatedById], references: [id])
}

model UserToEvent {
  id             Int        @id @default(autoincrement())
  sportsRate     Int?
  atmosphereRate Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  userId         Int
  eventId        Int
  tourGroupId    Int?
  createdById    Int
  updatedById    Int
  createdBy      User       @relation("UserToEventCreatedBy", fields: [createdById], references: [id])
  event          Event      @relation(fields: [eventId], references: [id])
  tourGroup      TourGroup? @relation(fields: [tourGroupId], references: [id])
  updatedBy      User       @relation("UserToEventUpdatedBy", fields: [updatedById], references: [id])
  user           User       @relation(fields: [userId], references: [id])
}

model UserToFacility {
  id          Int       @id @default(autoincrement())
  firstVisit  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  facilityId  Int
  createdById Int
  updatedById Int
  createdBy   User      @relation("UserToFacilityCreatedBy", fields: [createdById], references: [id])
  facility    Facility  @relation(fields: [facilityId], references: [id])
  updatedBy   User      @relation("UserToFacilityUpdatedBy", fields: [updatedById], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model UserToFriend {
  id                 Int       @id @default(autoincrement())
  openInvitation     Boolean
  invitationAccepted Boolean
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  invitingUserId     Int
  recipentUserId     Int
  createdById        Int
  updatedById        Int
  message            Message[]
  createdBy          User      @relation("UserToFriendCreatedBy", fields: [createdById], references: [id])
  invitingUser       User      @relation("InvitingUser", fields: [invitingUserId], references: [id])
  recipentUser       User      @relation("RecipentUser", fields: [recipentUserId], references: [id])
  updatedBy          User      @relation("UserToFriendUpdatedBy", fields: [updatedById], references: [id])

  @@unique([invitingUserId, recipentUserId], name: "unique_user_to_friend")
}

model UserToGadget {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  gadgetId    Int
  createdById Int
  updatedById Int
  createdBy   User     @relation("UserToGadgetCreatedBy", fields: [createdById], references: [id])
  gadget      Gadget   @relation(fields: [gadgetId], references: [id])
  updatedBy   User     @relation("UserToGadgetUpdatedBy", fields: [updatedById], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

enum Gender {
  FEMALE
  MALE
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

enum ErrorType {
  CLIENT
  LOGIC
  CORE
  APP
}

enum Role {
  SYSTEM
  ADMIN
  USER
}
