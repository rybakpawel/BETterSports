generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivateToken {
  id                BigInt       @id @default(autoincrement())
  token             String       @unique
  user              User         @relation("ActivateTokenUser", fields: [userId], references: [id])
  activatedAt       DateTime?
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ActivateTokenCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ActivateTokenUpdatedBy", fields: [updatedById], references: [id])

  userId            BigInt
  createdById       BigInt
  updatedById       BigInt
}

model Athlete {
  id                BigInt       @id @default(autoincrement())
  person            Person       @relation(fields: [personId], references: [id])
  team              Team?        @relation(fields: [teamId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("AthleteCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("AthleteUpdatedBy", fields: [updatedById], references: [id])

  personId          BigInt       @unique
  teamId            BigInt?
  createdById       BigInt
  updatedById       BigInt

  athleteToEvent    AthleteToEvent[]
  event             Event[]
}

model AthleteToEvent {
  id                BigInt       @id @default(autoincrement())
  athlete           Athlete      @relation(fields: [athleteId], references: [id])
  event             Event        @relation(fields: [eventId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("AthleteToEventCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("AthleteToEventUpdatedBy", fields: [updatedById], references: [id])

  athleteId         BigInt
  eventId           BigInt
  createdById       BigInt
  updatedById       BigInt
}

model Challenge {
  id                BigInt       @id @default(autoincrement())
  name              String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ChallengeCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ChallengeUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt
}

model City {
  id                BigInt       @id @default(autoincrement())
  name              String
  country           Country      @relation(fields: [countryId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("CityCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("CityUpdatedBy", fields: [updatedById], references: [id])

  countryId         BigInt
  createdById       BigInt
  updatedById       BigInt

  location          Location?
  user              User[]
}

model Color {
  id                BigInt       @id @default(autoincrement())
  name              String
  hexCode           String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ColorCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ColorUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt

  teamPrimaryColor  Team[]       @relation("PrimaryColor")
  teamSecondaryColor Team[]      @relation("SecondaryColor")
  userPrimaryColor  User[]       @relation("PrimaryColor")
  userSecondaryColor User[]      @relation("SecondaryColor")
}

model Country {
  id                BigInt       @id @default(autoincrement())
  name              String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("CountryCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("CountryUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt

  city              City[]
  league            League[]
  person            Person[]
}

model Event {
  id                BigInt       @id @default(autoincrement())
  date              DateTime?
  facility          Facility?    @relation(fields: [facilityId], references: [id])
  team1             Team?        @relation("Team1", fields: [team1Id], references: [id])
  team2             Team?        @relation("Team2", fields: [team2Id], references: [id])
  result            String?
  attendance        Int?
  sport             Sport        @relation(fields: [sportId], references: [id])
  winner            Athlete?     @relation(fields: [winnerId], references: [id])
  isDerby           Boolean?
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("EventCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("EventUpdatedBy", fields: [updatedById], references: [id])

  facilityId        BigInt?
  team1Id           BigInt?
  team2Id           BigInt?
  sportId           BigInt
  winnerId          BigInt?
  createdById       BigInt
  updatedById       BigInt

  athleteToEvent    AthleteToEvent[]
  imageToEvent      ImageToEvent[]
  userToEvent       UserToEvent[]
}

model Facility {
  id                BigInt       @id @default(autoincrement())
  capacity          Int
  location          Location     @relation(fields: [locationId], references: [id])
  name              String
  build_year        Int?
  coordinates       String?
  description       String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("FacilityCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("FacilityUpdatedBy", fields: [updatedById], references: [id])

  locationId        BigInt       @unique
  standsId          BigInt?
  createdById       BigInt
  updatedById       BigInt

  event             Event[]
  imageToFacility   ImageToFacility[]
  userToFacility    UserToFacility[]
}

model Gadget {
  id                BigInt       @id @default(autoincrement())
  gadgetType        GadgetType   @relation(fields: [gadgetTypeId], references: [id])
  team              Team?        @relation(fields: [teamId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("GadgetCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("GadgetUpdatedBy", fields: [updatedById], references: [id])

  gadgetTypeId      BigInt
  teamId            BigInt?
  createdById       BigInt
  updatedById       BigInt

  imageToGadget     ImageToGadget[]
  userToGadget      UserToGadget[]
}

model GadgetType {
  id                BigInt       @id @default(autoincrement())
  name              String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("GadgetTypeCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("GadgetTypeUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt

  gadget            Gadget[]
}

model Image {
  id                BigInt       @id @default(autoincrement())
  name              String
  url               String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ImageCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ImageUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt

  imageToEvent      ImageToEvent[]
  imageToFacility   ImageToFacility[]
  imageToGadget     ImageToGadget[]
  imageToUser       ImageToUser[]
  team              Team[]
  userProfileImage  User[]       @relation("ProfileImage")
  userBackgroundImage User[]     @relation("BackgroundImage")
}

model ImageToEvent {
  id                BigInt       @id @default(autoincrement())
  image             Image        @relation(fields: [imageId], references: [id])
  event             Event        @relation(fields: [eventId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ImageToEventCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ImageToEventUpdatedBy", fields: [updatedById], references: [id])

  imageId           BigInt
  eventId           BigInt
  createdById       BigInt
  updatedById       BigInt
}


model ImageToFacility {
  id                BigInt       @id @default(autoincrement())
  image             Image        @relation(fields: [imageId], references: [id])
  facility          Facility     @relation(fields: [facilityId], references: [id])
  isIndoor          Boolean?
  isOutdoor         Boolean?
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ImageToFacilityCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ImageToFacilityUpdatedBy", fields: [updatedById], references: [id])

  imageId           BigInt
  facilityId        BigInt
  createdById       BigInt
  updatedById       BigInt
}

model ImageToGadget {
  id                BigInt       @id @default(autoincrement())
  image             Image        @relation(fields: [imageId], references: [id])
  gadget            Gadget       @relation(fields: [gadgetId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ImageToGadgetCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ImageToGadgetUpdatedBy", fields: [updatedById], references: [id])


  imageId           BigInt
  gadgetId          BigInt
  createdById       BigInt
  updatedById       BigInt
}


model ImageToUser {
  id                BigInt       @id @default(autoincrement())
  image             Image        @relation(fields: [imageId], references: [id])
  user              User         @relation(fields: [userId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ImageToUserCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ImageToUserUpdatedBy", fields: [updatedById], references: [id])

  imageId           BigInt
  userId            BigInt
  createdById       BigInt
  updatedById       BigInt
}



model League {
  id                BigInt       @id @default(autoincrement())
  country           Country      @relation(fields: [countryId], references: [id])
  sport             Sport        @relation(fields: [sportId], references: [id])
  division          Int?
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("LeagueCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("LeagueUpdatedBy", fields: [updatedById], references: [id])

  countryId         BigInt
  sportId           BigInt
  createdById       BigInt
  updatedById       BigInt

  team              Team[]
}

model Location {
  id                BigInt       @id @default(autoincrement())
  city              City         @relation(fields: [cityId], references: [id])
  street            String?
  number            String?
  zipCode           String?
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("LocationCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("LocationUpdatedBy", fields: [updatedById], references: [id])

  cityId            BigInt       @unique
  createdById       BigInt
  updatedById       BigInt

  facility          Facility?
}

model Log {
  id                BigInt       @id @default(autoincrement())
  module            Module       @relation(fields: [moduleId], references: [id])
  description       String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("LogCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("LogUpdatedBy", fields: [updatedById], references: [id])

  moduleId          BigInt
  createdById       BigInt
  updatedById       BigInt
}

model Market {
  id                BigInt       @id @default(autoincrement())
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("MarketCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("MarketUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt
}

model Message {
  id                BigInt       @id @default(autoincrement())
  userToFriend      UserToFriend @relation(fields: [userToFriendId], references: [id])
  author            User         @relation(fields: [authorId], references: [id])
  content           String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("MessageCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("MessageUpdatedBy", fields: [updatedById], references: [id])

  userToFriendId    BigInt
  authorId          BigInt
  createdById       BigInt
  updatedById       BigInt
}


model Module {
  id                BigInt       @id @default(autoincrement())
  name              String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ModuleCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ModuleUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt

  log               Log[]
}

model Person {
  id                BigInt       @id @default(autoincrement())
  name              String?
  lastName          String?
  birthDate         DateTime?
  nationality       Country?     @relation(fields: [nationalityId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User?        @relation("PersonCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User?        @relation("PersonUpdatedBy", fields: [updatedById], references: [id])

  nationalityId     BigInt?
  createdById       BigInt?
  updatedById       BigInt?

  athlete           Athlete?
  team              Team[]
  user              User?
}

model ResetPasswordToken {
  id                BigInt       @id @default(autoincrement())
  token             String       @unique
  user              User         @relation("ResetPasswordTokenUser", fields: [userId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("ResetPasswordTokenCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("ResetPasswordTokenUpdatedBy", fields: [updatedById], references: [id])

  userId            BigInt
  createdById       BigInt
  updatedById       BigInt
}

model Sport {
  id                BigInt       @id @default(autoincrement())
  name              String
  isIndividual      Boolean
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("SportCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("SportUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt

  event             Event[]
  league            League[]
}

model Team {
  id                BigInt       @id @default(autoincrement())
  name              String
  coach             Person?      @relation(fields: [coachId], references: [id])
  primaryColor      Color?       @relation("PrimaryColor", fields: [primaryColorId], references: [id])
  secondaryColor    Color?       @relation("SecondaryColor", fields: [secondaryColorId], references: [id])
  logo              Image?       @relation(fields: [logoId], references: [id])
  league            League?      @relation(fields: [leagueId], references: [id])
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("TeamCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("TeamUpdatedBy", fields: [updatedById], references: [id])

  coachId           BigInt
  primaryColorId    BigInt
  secondaryColorId  BigInt
  logoId            BigInt
  leagueId          BigInt
  createdById       BigInt
  updatedById       BigInt

  athlete           Athlete[]
  eventTeam1        Event[]     @relation("Team1")
  eventTeam2        Event[]     @relation("Team2")
  gadget            Gadget[]
  user              User[]
}

model TourGroup {
  id                BigInt       @id @default(autoincrement())
  name              String
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("TourGroupCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("TourGroupUpdatedBy", fields: [updatedById], references: [id])

  createdById       BigInt
  updatedById       BigInt

  userToEvent       UserToEvent[]
}

model User {
  id                BigInt       @id @default(autoincrement())
  email             String       @unique
  username          String       @unique
  password          String
  person            Person       @relation(fields: [personId], references: [id])
  profileImage      Image?       @relation("ProfileImage", fields: [profileImageId], references: [id])
  backgroundImage   Image?       @relation("BackgroundImage", fields: [backgroundImageId], references: [id])
  favouriteTeam     Team?        @relation(fields: [favouriteTeamId], references: [id])
  city              City?        @relation(fields: [cityId], references: [id])
  primaryColor      Color?       @relation("PrimaryColor", fields: [primaryColorId], references: [id])
  secondaryColor    Color?       @relation("SecondaryColor", fields: [secondaryColorId], references: [id])
  isActive          Boolean      @default(false)
  createdAt         DateTime     @default(now())
  createdBy         User?        @relation("UserCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User?        @relation("UserUpdatedBy", fields: [updatedById], references: [id])

  personId          BigInt       @unique
  profileImageId    BigInt?
  backgroundImageId BigInt?
  favouriteTeamId   BigInt?
  cityId            BigInt?
  primaryColorId    BigInt?
  secondaryColorId  BigInt?
  createdById       BigInt?
  updatedById       BigInt?

  activateToken     ActivateToken[] @relation("ActivateTokenUser")
  activateTokenCreatedBy ActivateToken[] @relation("ActivateTokenCreatedBy")
  activateTokenUpdatedBy ActivateToken[] @relation("ActivateTokenUpdatedBy")
  athleteCreatedBy  Athlete[]     @relation("AthleteCreatedBy")
  athleteUpdatedBy  Athlete[]     @relation("AthleteUpdatedBy")
  athleteToEventCreatedBy AthleteToEvent[] @relation("AthleteToEventCreatedBy")
  athleteToEventUpdatedBy AthleteToEvent[] @relation("AthleteToEventUpdatedBy")
  challengeCreatedBy Challenge[]  @relation("ChallengeCreatedBy")
  challengeUpdatedBy Challenge[]  @relation("ChallengeUpdatedBy")
  cityCreatedBy      City[]       @relation("CityCreatedBy")
  cityUpdatedBy      City[]       @relation("CityUpdatedBy")
  colorCreatedBy     Color[]      @relation("ColorCreatedBy")
  colorUpdatedBy     Color[]      @relation("ColorUpdatedBy")
  countryCreatedBy   Country[]    @relation("CountryCreatedBy")
  countryUpdatedBy   Country[]    @relation("CountryUpdatedBy")
  eventCreatedBy     Event[]      @relation("EventCreatedBy")
  eventUpdatedBy     Event[]      @relation("EventUpdatedBy")
  facilityCreatedBy  Facility[]   @relation("FacilityCreatedBy")
  facilityUpdatedBy  Facility[]   @relation("FacilityUpdatedBy")
  gadgetCreatedBy    Gadget[]     @relation("GadgetCreatedBy")
  gadgetUpdatedBy    Gadget[]     @relation("GadgetUpdatedBy")
  gadgetTypeCreatedBy GadgetType[] @relation("GadgetTypeCreatedBy")
  gadgetTypeUpdatedBy GadgetType[] @relation("GadgetTypeUpdatedBy")
  imageCreatedBy     Image[]      @relation("ImageCreatedBy")
  imageUpdatedBy     Image[]      @relation("ImageUpdatedBy")
  imageToEventCreatedBy ImageToEvent[] @relation("ImageToEventCreatedBy")
  imageToEventUpdatedBy ImageToEvent[] @relation("ImageToEventUpdatedBy")
  imageToFacilityCreatedBy ImageToFacility[] @relation("ImageToFacilityCreatedBy")
  imageToFacilityUpdatedBy ImageToFacility[] @relation("ImageToFacilityUpdatedBy")
  imageToGadgetCreatedBy ImageToGadget[] @relation("ImageToGadgetCreatedBy")
  imageToGadgetUpdatedBy ImageToGadget[] @relation("ImageToGadgetUpdatedBy")
  imageToUser ImageToUser[]
  imageToUserCreatedBy ImageToUser[] @relation("ImageToUserCreatedBy")
  imageToUserUpdatedBy ImageToUser[] @relation("ImageToUserUpdatedBy")
  leagueCreatedBy     League[]     @relation("LeagueCreatedBy")
  leagueUpdatedBy     League[]     @relation("LeagueUpdatedBy")
  locationCreatedBy   Location[]   @relation("LocationCreatedBy")
  locationUpdatedBy   Location[]   @relation("LocationUpdatedBy")
  logCreatedBy        Log[]        @relation("LogCreatedBy")
  logUpdatedBy        Log[]        @relation("LogUpdatedBy")
  marketCreatedBy     Market[]     @relation("MarketCreatedBy")
  marketUpdatedBy     Market[]     @relation("MarketUpdatedBy")
  message             Message[]
  messageCreatedBy    Message[]    @relation("MessageCreatedBy")
  messageUpdatedBy    Message[]    @relation("MessageUpdatedBy")
  moduleCreatedBy     Module[]     @relation("ModuleCreatedBy")
  moduleUpdatedBy     Module[]     @relation("ModuleUpdatedBy")
  personCreatedBy     Person[]     @relation("PersonCreatedBy")
  personUpdatedBy     Person[]     @relation("PersonUpdatedBy")
  resetPasswordToken  ResetPasswordToken[] @relation("ResetPasswordTokenUser")
  resetPasswordTokenCreatedBy ResetPasswordToken[] @relation("ResetPasswordTokenCreatedBy")
  resetPasswordTokenUpdatedBy ResetPasswordToken[] @relation("ResetPasswordTokenUpdatedBy")
  sportCreatedBy      Sport[]      @relation("SportCreatedBy")
  sportUpdatedBy      Sport[]      @relation("SportUpdatedBy")
  teamCreatedBy       Team[]       @relation("TeamCreatedBy")
  teamUpdatedBy       Team[]       @relation("TeamUpdatedBy")
  tourGroupCreatedBy  TourGroup[]  @relation("TourGroupCreatedBy")
  tourGroupUpdatedBy  TourGroup[]  @relation("TourGroupUpdatedBy")
  userCreatedBy       User[]       @relation("UserCreatedBy")
  userUpdatedBy       User[]       @relation("UserUpdatedBy")
  userToEvent         UserToEvent[]
  userToEventCreatedBy UserToEvent[] @relation("UserToEventCreatedBy")
  userToEventUpdatedBy UserToEvent[] @relation("UserToEventUpdatedBy")
  userToFacility      UserToFacility[]
  userToFacilityCreatedBy UserToFacility[] @relation("UserToFacilityCreatedBy")
  userToFacilityUpdatedBy UserToFacility[] @relation("UserToFacilityUpdatedBy")
  UserToFriendInviting UserToFriend[] @relation("InvitingUser")
  UserToFriendRecipent UserToFriend[] @relation("RecipentUser")
  userToFriendCreatedBy UserToFriend[] @relation("UserToFriendCreatedBy")
  userToFriendUpdatedBy UserToFriend[] @relation("UserToFriendUpdatedBy")
  userToGadget        UserToGadget[]
  userToGadgetCreatedBy UserToGadget[] @relation("UserToGadgetCreatedBy")
  userToGadgetUpdatedBy UserToGadget[] @relation("UserToGadgetUpdatedBy")
}

model UserToEvent {
  id                BigInt       @id @default(autoincrement())
  user              User         @relation(fields: [userId], references: [id])
  event             Event        @relation(fields: [eventId], references: [id])
  tourGroup         TourGroup?   @relation(fields: [tourGroupId], references: [id])
  sportsRate        Int?
  atmosphereRate    Int?
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("UserToEventCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("UserToEventUpdatedBy", fields: [updatedById], references: [id])

  userId            BigInt
  eventId           BigInt
  tourGroupId       BigInt?
  createdById       BigInt
  updatedById       BigInt
}

model UserToFacility {
  id                BigInt       @id @default(autoincrement())
  user              User         @relation(fields: [userId], references: [id])
  facility          Facility     @relation(fields: [facilityId], references: [id])
  firstVisit        DateTime?
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("UserToFacilityCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("UserToFacilityUpdatedBy", fields: [updatedById], references: [id])

  userId            BigInt
  facilityId        BigInt
  createdById       BigInt
  updatedById       BigInt
}

model UserToFriend {
  id                BigInt       @id @default(autoincrement())
  invitingUser      User         @relation("InvitingUser", fields: [invitingUserId], references: [id])
  recipentUser      User         @relation("RecipentUser", fields: [recipentUserId], references: [id])
  openInvitation    Boolean
  invitationAccepted Boolean
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("UserToFriendCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("UserToFriendUpdatedBy", fields: [updatedById], references: [id])

  invitingUserId    BigInt
  recipentUserId    BigInt
  createdById       BigInt
  updatedById       BigInt

  message           Message[]

  @@unique([invitingUserId, recipentUserId], name: "unique_user_to_friend")
}

model UserToGadget {
  id                BigInt       @id @default(autoincrement())
  user              User         @relation(fields: [userId], references: [id])
  gadget            Gadget       @relation(fields: [gadgetId], references: [id])
  name              String?
  description       String?
  createdAt         DateTime     @default(now())
  createdBy         User         @relation("UserToGadgetCreatedBy", fields: [createdById], references: [id])
  updatedAt         DateTime     @updatedAt
  updatedBy         User         @relation("UserToGadgetUpdatedBy", fields: [updatedById], references: [id])

  userId            BigInt
  gadgetId          BigInt
  createdById       BigInt
  updatedById       BigInt
}


